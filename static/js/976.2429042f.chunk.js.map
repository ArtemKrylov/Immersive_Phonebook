{"version":3,"file":"static/js/976.2429042f.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.tsx","components/ContactsPaginate/ContactsPaginate.styled.jsx","components/ContactsPaginate/ContactsPaginate.tsx","components/Skeletons/ContactsSkeleton.tsx","redux/contacts/selectorsContacts.ts","components/ContactList/ContactList.tsx","components/ContactFilter/ContactFilter.tsx","components/ContactForm/ContactForm.tsx","components/ContactAdd/ContactAdd.tsx","pages/ContactsPage/ContactsPage.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Center,\n  Divider,\n  Flex,\n  ListIcon,\n  ListItem,\n  Spacer,\n  Text,\n} from \"@chakra-ui/react\";\nimport { MdContactPhone } from \"react-icons/md\";\n\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport { deleteContact } from \"redux/contacts/operationsContacts\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\n\ninterface ContactItemInterface {\n  id: string;\n  name: string;\n  number: string;\n}\n\nconst ContactItem: React.FC<ContactItemInterface> = ({ id, name, number }) => {\n  const dispatch = useAppDispatch();\n  function handleDeleteBtnClick(event: any) {\n    dispatch<any>(deleteContact(id));\n  }\n  return (\n    <ListItem\n      className=\"contactItem\"\n      p={3}\n      border=\"1px dotted\"\n      borderColor=\"accent.300\"\n      borderRadius={\"md\"}\n      maxW={{ md: \"300px\", lg: \"500px\" }}\n      minW={\"250px\"}\n      _hover={{ borderColor: \"white\", transform: \"translate(1px, 1px)\" }}\n      _focus={{ borderColor: \"white\", transform: \"translate(1px, 1px)\" }}\n    >\n      <Flex\n        className=\"contactItem__name\"\n        alignItems={\"center\"}\n        justify={\"space-between\"}\n        flexWrap=\"wrap\"\n        mb={3}\n      >\n        <ListIcon as={MdContactPhone} m={0} />\n        <Text ml=\"10px\">{name}:</Text>\n        <Spacer />\n        <Text className=\"contactItem__number\">{number}</Text>\n      </Flex>\n      <Divider borderColor={\"purple.700\"} mb={3} />\n      <Center>\n        <Button\n          type=\"button\"\n          className=\"contactItem__button\"\n          value={id}\n          onClick={handleDeleteBtnClick}\n          leftIcon={<DeleteIcon />}\n          size={{ base: \"xs\", md: \"md\" }}\n          colorScheme={\"purple\"}\n          _hover={{\n            color: \"purple.700\",\n            bgColor: \"white\",\n            border: \"1px solid purple\",\n          }}\n          _focus={{\n            color: \"purple.700\",\n            bgColor: \"white\",\n            border: \"1px solid purple\",\n          }}\n        >\n          Delete\n        </Button>\n      </Center>\n    </ListItem>\n  );\n};\n\nexport default ContactItem;\n","import styled from \"styled-components\";\nexport const ContactsPaginateStyled = styled.div`\n  padding: 20px;\n  .contactsPaginate {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 15px;\n\n    & > li {\n      list-style: none;\n      &.selected {\n        color: #805ad5;\n      }\n      &.disabled {\n        opacity: 0;\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { ContactsPaginateStyled } from \"./ContactsPaginate.styled\";\n\ninterface ContactsPaginateInterface {\n  pageCount: number;\n  setPage: (page: number) => void;\n}\n\nconst ContactsPaginate: React.FC<ContactsPaginateInterface> = ({\n  pageCount,\n  setPage,\n}) => {\n  function handlePageClick(event: any) {\n    const newPage = event.selected + 1;\n    setPage(newPage);\n  }\n  return (\n    <ContactsPaginateStyled>\n      <ReactPaginate\n        breakLabel=\"...\"\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={3}\n        pageCount={pageCount}\n        previousLabel=\"< previous\"\n        className=\"contactsPaginate\"\n      />\n    </ContactsPaginateStyled>\n  );\n};\n\nexport default ContactsPaginate;\n","import { Skeleton, Stack } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst ContactsSkeleton: React.FC = () => {\n  return (\n    <Stack p=\"[5,null,10,20]\">\n      <Skeleton h=\"8\" startColor=\"blue.800\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"blue.500\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"cyan.500\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"teal.300\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"green.400\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"pink.700\" endColor=\"regray.300d\" />\n      <Skeleton h=\"8\" startColor=\"purple.600\" endColor=\"gray.300\" />\n    </Stack>\n  );\n};\n\nexport default ContactsSkeleton;\n","import { RootState } from \"../store\";\n\nexport const selectContacts = (state: RootState) => state.contacts.data;\n\nexport const selectLoadingContacts = (state: RootState) =>\n  state.contacts.isLoading;\n","import { Box, Center, List, SimpleGrid } from \"@chakra-ui/react\";\nimport ContactItem from \"components/ContactItem/ContactItem\";\nimport ContactsPaginate from \"components/ContactsPaginate/ContactsPaginate\";\nimport ContainerComp from \"components/Container/ContainerComp\";\nimport SkeletonContacts from \"components/Skeletons/ContactsSkeleton\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport { Contact } from \"models/contact\";\nimport React, { useEffect, useState } from \"react\";\n\nimport {\n  selectContacts,\n  selectLoadingContacts,\n} from \"redux/contacts/selectorsContacts\";\n\ninterface ContactListInterface {\n  query: string | null;\n}\n\nconst ContactList: React.FC<ContactListInterface> = ({ query }) => {\n  //local state\n  const [page, setPage] = useState(1);\n  const [shownContacts, setShownContacts] = useState<Contact[]>([]);\n  //\n\n  const contacts: Contact[] = useAppSelector(selectContacts);\n  const filteredContacts: Contact[] = filterContacts(contacts, query);\n  // let filteredPageContacts = filteredContacts.slice(\n  //   0 + 10 * (page - 1),\n  //   9 + 10 * (page - 1)\n  // );\n  const isLoading: boolean = useAppSelector(selectLoadingContacts);\n  const CONTACTS_PER_PAGE: number = 10;\n  const pageCount: number = Math.ceil(\n    filteredContacts.length / CONTACTS_PER_PAGE\n  );\n\n  useEffect(() => {\n    const filteredPageContacts: Contact[] = filteredContacts.slice(\n      0 + CONTACTS_PER_PAGE * (page - 1),\n      9 + CONTACTS_PER_PAGE * (page - 1) + 1\n    );\n    setShownContacts(filteredPageContacts);\n  }, [page, filteredContacts]);\n\n  return (\n    <Box as=\"section\" className=\"section section--contactList\">\n      <ContainerComp>\n        <List className={\"contactList\"} p={3} spacing={2}>\n          <SimpleGrid minChildWidth={\"250px\"} spacing={{ base: \"2\", md: \"4\" }}>\n            {isLoading && <SkeletonContacts />}\n            {shownContacts.length > 0 &&\n              shownContacts.map(({ id = \"\", name, number }) => (\n                <Center key={id}>\n                  <ContactItem id={id} name={name} number={number} />\n                </Center>\n              ))}\n          </SimpleGrid>\n          {pageCount > 1 && (\n            <ContactsPaginate pageCount={pageCount} setPage={setPage} />\n          )}\n        </List>\n      </ContainerComp>\n    </Box>\n  );\n};\n\nexport default ContactList;\n\nfunction filterContacts(contacts: Contact[], query: string | null) {\n  if (!query) return contacts;\n  return contacts.filter((contact) => contact.name.includes(query));\n}\n","import React from \"react\";\nimport { Center, Input } from \"@chakra-ui/react\";\nimport ContainerComp from \"components/Container/ContainerComp\";\n\ninterface ContactFilterInterface {\n  getQuery(query: string): void;\n}\n\nconst ContactFilter: React.FC<ContactFilterInterface> = ({ getQuery }) => {\n  function handleQueryChange(event: any) {\n    getQuery(event.target.value);\n  }\n\n  return (\n    <ContainerComp>\n      <Center>\n        <Input\n          type={\"text\"}\n          placeholder={\"Enter your filter query\"}\n          onChange={handleQueryChange}\n          maxW={{ md: \"400px\", lg: \"600px\" }}\n          textAlign=\"center\"\n          cursor={\"pointer\"}\n          borderRadius=\"md\"\n          _hover={{\n            color: \"white\",\n            backgroundColor: \"accent.500\",\n            _placeholder: { color: \"white\" },\n          }}\n          _focus={{\n            color: \"white\",\n            backgroundColor: \"accent.500\",\n            _placeholder: { color: \"white\" },\n          }}\n        ></Input>\n      </Center>\n    </ContainerComp>\n  );\n};\n\nexport default ContactFilter;\n","import { addContact } from \"redux/contacts/operationsContacts\";\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport {\n  Box,\n  Button,\n  Center,\n  Container,\n  FormLabel,\n  Input,\n  Text,\n} from \"@chakra-ui/react\";\n\nconst ContactForm = () => {\n  const dispatch = useAppDispatch();\n\n  function onContactFormSubmit(event: any) {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const name: string = form.elements.name.value;\n    const number: string = form.elements.number.value;\n    if (!name || !number) return;\n    dispatch<any>(addContact({ name, number }));\n    form.reset();\n  }\n\n  return (\n    <Box as=\"section\" className=\"section section--contactForm\">\n      <Container className=\"container\">\n        <form className={\"contactForm\"} onSubmit={onContactFormSubmit}>\n          <FormLabel\n            mb={3}\n            cursor={\"pointer\"}\n            _hover={{ textShadow: \"accentTextShadow2\" }}\n            _focus={{ textShadow: \"accentTextShadow2\" }}\n          >\n            <Text className=\"contactForm__FormLabel-text\">Name</Text>\n            <Input\n              type=\"text\"\n              className=\"contactForm__input\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              placeholder=\"Enter your name\"\n              _hover={{ borderColor: \"accent2.700\" }}\n              _focus={{ borderColor: \"accent2.700\" }}\n            />\n          </FormLabel>\n          <FormLabel\n            mb={3}\n            cursor={\"pointer\"}\n            _hover={{ textShadow: \"accentTextShadow2\" }}\n            _focus={{ textShadow: \"accentTextShadow2\" }}\n          >\n            <Text className=\"contactForm__FormLabel-text\">Number</Text>\n            <Input\n              type=\"tel\"\n              className=\"contactForm__input\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              placeholder=\"Enter your phone number\"\n              _hover={{ borderColor: \"accent2.700\" }}\n              _focus={{ borderColor: \"accent2.700\" }}\n            />\n          </FormLabel>\n          <Center>\n            <Button\n              type=\"submit\"\n              className=\"contactForm__button\"\n              colorScheme={\"purple\"}\n              _hover={{\n                color: \"purple.700\",\n                bgColor: \"white\",\n                border: \"1px solid purple\",\n              }}\n              _focus={{\n                color: \"purple.700\",\n                bgColor: \"white\",\n                border: \"1px solid purple\",\n              }}\n            >\n              Add contact\n            </Button>\n          </Center>\n        </form>\n      </Container>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Spacer,\n  Text,\n} from \"@chakra-ui/react\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport React from \"react\";\nimport { MdPersonAdd } from \"react-icons/md\";\n\nconst ContactAdd: React.FC = () => {\n  return (\n    <Accordion allowToggle>\n      <AccordionItem pl={2} pr={2}>\n        <AccordionButton\n          mb={[2, 2, 3, 4]}\n          borderRadius=\"md\"\n          _hover={{\n            color: \"white\",\n            backgroundColor: \"accent.500\",\n          }}\n        >\n          <MdPersonAdd />\n          <Text ml={5}>Add contact</Text>\n          <Spacer />\n\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <ContactForm />\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n};\n\nexport default ContactAdd;\n","import React, { useEffect, useState } from \"react\";\nimport { Box, Heading } from \"@chakra-ui/react\";\nimport { Helmet } from \"react-helmet\";\n\nimport { fetchContacts } from \"redux/contacts/operationsContacts\";\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport { selectorAuth } from \"redux/auth/selectorsAuth\";\n\nimport ContactList from \"components/ContactList/ContactList\";\nimport ContactFilter from \"components/ContactFilter/ContactFilter\";\nimport ContainerComp from \"components/Container/ContainerComp\";\nimport ContactAdd from \"components/ContactAdd/ContactAdd\";\n\nconst ContactsPage: React.FC = () => {\n  //localstate\n  const [query, setQuery] = useState<string | null>(null);\n  //\n  const { token } = useAppSelector(selectorAuth);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (!token) return;\n    dispatch<any>(fetchContacts());\n  }, [dispatch, token]);\n\n  function getQuery(query: string) {\n    setQuery(query);\n  }\n\n  return (\n    <Box\n      className=\"contactPage\"\n      pt={[3, 3, 4, 5]}\n      fontFamily=\"contactsFont\"\n      flexGrow={1}\n    >\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Alkatra:wght@400;700&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      <ContainerComp>\n        <Heading mb={[2, 2, 3, 4]} fontSize={\"xl\"} textAlign=\"center\">\n          Your contacts\n        </Heading>\n        <ContactAdd />\n      </ContainerComp>\n\n      <ContactFilter getQuery={getQuery} />\n      <ContactList query={query} />\n    </Box>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["_ref","id","name","number","dispatch","useAppDispatch","_jsxs","ListItem","className","p","border","borderColor","borderRadius","maxW","md","lg","minW","_hover","transform","_focus","children","Flex","alignItems","justify","flexWrap","mb","_jsx","ListIcon","as","MdContactPhone","m","Text","ml","Spacer","Divider","Center","Button","type","value","onClick","event","deleteContact","leftIcon","DeleteIcon","size","base","colorScheme","color","bgColor","ContactsPaginateStyled","styled","_templateObject","_taggedTemplateLiteral","pageCount","setPage","ReactPaginate","breakLabel","nextLabel","onPageChange","newPage","selected","pageRangeDisplayed","previousLabel","Stack","Skeleton","h","startColor","endColor","selectContacts","state","contacts","data","selectLoadingContacts","isLoading","query","_useState","useState","_useState2","_slicedToArray","page","_useState3","_useState4","shownContacts","setShownContacts","filteredContacts","filter","contact","includes","filterContacts","useAppSelector","Math","ceil","length","useEffect","filteredPageContacts","slice","Box","ContainerComp","List","spacing","SimpleGrid","minChildWidth","SkeletonContacts","map","_ref2","_ref2$id","ContactItem","ContactsPaginate","getQuery","Input","placeholder","onChange","target","textAlign","cursor","backgroundColor","_placeholder","Container","onSubmit","preventDefault","form","currentTarget","elements","addContact","reset","FormLabel","textShadow","pattern","title","required","Accordion","allowToggle","AccordionItem","pl","pr","AccordionButton","MdPersonAdd","AccordionIcon","AccordionPanel","ContactForm","setQuery","token","selectorAuth","fetchContacts","pt","fontFamily","flexGrow","Helmet","rel","href","Heading","fontSize","ContactAdd","ContactFilter","ContactList"],"sourceRoot":""}