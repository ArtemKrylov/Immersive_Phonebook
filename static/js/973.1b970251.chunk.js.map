{"version":3,"file":"static/js/973.1b970251.chunk.js","mappings":"iaAgEA,EAzCoD,SAAHA,GAA8B,IAAxBC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OACzDC,GAAWC,EAAAA,EAAAA,KAIjB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAQ,CACPC,UAAU,cACVC,EAAG,EACHC,OAAO,cACPC,aAAc,KAAKC,SAAA,EAEnBN,EAAAA,EAAAA,MAACO,EAAAA,EAAI,CACHL,UAAU,oBACVM,WAAY,SACZC,QAAS,gBACTC,SAAS,OACTC,GAAI,EAAEL,SAAA,EAENM,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAIC,EAAAA,IAAgBC,EAAG,KACjChB,EAAAA,EAAAA,MAACiB,EAAAA,EAAI,CAACC,GAAG,OAAMZ,SAAA,CAAEV,EAAK,QACtBgB,EAAAA,EAAAA,KAACO,EAAAA,EAAM,KACPP,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAACf,UAAU,sBAAqBI,SAAET,QAEzCe,EAAAA,EAAAA,KAACQ,EAAAA,EAAO,CAACC,YAAa,aAAcV,GAAI,KACxCC,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAAAhB,UACLM,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACLC,KAAK,SACLtB,UAAU,sBACVuB,MAAO9B,EACP+B,QA5BR,SAA8BC,GAC5B7B,GAAc8B,EAAAA,EAAAA,IAAcjC,GAC9B,EA2BQkC,UAAUjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,IACrBC,KAAM,CAAEC,KAAM,KAAMC,GAAI,MAAO3B,SAChC,eAMT,E,6BC7CA,EAdmC,WACjC,OACEN,EAAAA,EAAAA,MAACkC,EAAAA,EAAK,CAAC/B,EAAE,iBAAgBG,SAAA,EACvBM,EAAAA,EAAAA,KAACuB,EAAAA,EAAQ,CAACC,EAAE,IAAIC,WAAW,WAAWC,SAAS,cAC/C1B,EAAAA,EAAAA,KAACuB,EAAAA,EAAQ,CAACC,EAAE,IAAIC,WAAW,WAAWC,SAAS,cAC/C1B,EAAAA,EAAAA,KAACuB,EAAAA,EAAQ,CAACC,EAAE,IAAIC,WAAW,WAAWC,SAAS,cAC/C1B,EAAAA,EAAAA,KAACuB,EAAAA,EAAQ,CAACC,EAAE,IAAIC,WAAW,WAAWC,SAAS,cAC/C1B,EAAAA,EAAAA,KAACuB,EAAAA,EAAQ,CAACC,EAAE,IAAIC,WAAW,YAAYC,SAAS,cAChD1B,EAAAA,EAAAA,KAACuB,EAAAA,EAAQ,CAACC,EAAE,IAAIC,WAAW,WAAWC,SAAS,iBAC/C1B,EAAAA,EAAAA,KAACuB,EAAAA,EAAQ,CAACC,EAAE,IAAIC,WAAW,aAAaC,SAAS,eAGvD,ECbaC,EAAiB,SAACC,GAAgB,OAAKA,EAAMC,SAASC,IAAK,EAE3DC,EAAwB,SAACH,GAAgB,OACpDA,EAAMC,SAASG,SAAU,EC4B3B,EArB8B,WAC5B,IAAMH,GAAsBI,EAAAA,EAAAA,GAAeN,GACrCK,GAAqBC,EAAAA,EAAAA,GAAeF,GAE1C,OACE/B,EAAAA,EAAAA,KAACkC,EAAAA,GAAG,CAAChC,GAAG,UAAUZ,UAAU,+BAA8BI,UACxDM,EAAAA,EAAAA,KAACmC,EAAAA,EAAa,CAAAzC,UACZM,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAAC9C,UAAW,cAAeC,EAAG,EAAG8C,QAAS,EAAE3C,UAC/CN,EAAAA,EAAAA,MAACkD,EAAAA,EAAU,CAACC,cAAe,QAASF,QAAS,CAAEjB,KAAM,IAAKC,GAAI,KAAM3B,SAAA,CACjEsC,IAAahC,EAAAA,EAAAA,KAACwC,EAAgB,IAC9BX,EAASY,OAAS,GACjBZ,EAASa,KAAI,SAAA5D,GAAA,IAAA6D,EAAA7D,EAAGC,GAAAA,OAAE,IAAA4D,EAAG,GAAEA,EAAE3D,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAAM,OACnCe,EAAAA,EAAAA,KAAC4C,EAAW,CAAU7D,GAAIA,EAAIC,KAAMA,EAAMC,OAAQA,GAAhCF,EAA0C,YAO5E,E,UC0BA,EArDoB,WAClB,IAAMG,GAAWC,EAAAA,EAAAA,KAYjB,OACEa,EAAAA,EAAAA,KAACkC,EAAAA,GAAG,CAAChC,GAAG,UAAUZ,UAAU,+BAA8BI,UACxDM,EAAAA,EAAAA,KAAC6C,EAAAA,EAAS,CAACvD,UAAU,YAAWI,UAC9BN,EAAAA,EAAAA,MAAA,QAAME,UAAW,cAAewD,SAbtC,SAA6B/B,GAC3BA,EAAMgC,iBACN,IAAMC,EAAOjC,EAAMkC,cACbjE,EAAegE,EAAKE,SAASlE,KAAK6B,MAClC5B,EAAiB+D,EAAKE,SAASjE,OAAO4B,MACvC7B,GAASC,IACdC,GAAciE,EAAAA,EAAAA,IAAW,CAAEnE,KAAAA,EAAMC,OAAAA,KACjC+D,EAAKI,QACP,EAKoE1D,SAAA,EAC5DN,EAAAA,EAAAA,MAAA,SAAAM,SAAA,EACEM,EAAAA,EAAAA,KAAA,KAAGV,UAAU,0BAAyBI,SAAC,UACvCM,EAAAA,EAAAA,KAAA,SACEY,KAAK,OACLtB,UAAU,qBACVN,KAAK,OACLqE,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAU,WAAO,EACjBC,YAAY,kBACZC,WAAS,QAGbtE,EAAAA,EAAAA,MAAA,SAAAM,SAAA,EACEM,EAAAA,EAAAA,KAAA,KAAGV,UAAU,0BAAyBI,SAAC,YACvCM,EAAAA,EAAAA,KAAA,SACEY,KAAK,MACLtB,UAAU,qBACVN,KAAK,SACLqE,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAAU,WAAO,EACjBC,YAAY,gCAGhBzD,EAAAA,EAAAA,KAAA,UAAQY,KAAK,SAAStB,UAAU,sBAAqBI,SAAC,sBAOhE,ECDA,EAjC+B,WAC7B,IAAQiE,GAAU1B,EAAAA,EAAAA,GAAe2B,EAAAA,IAAzBD,MACFzE,GAAWC,EAAAA,EAAAA,KAMjB,OALA0E,EAAAA,EAAAA,YAAU,WACHF,GACLzE,GAAc4E,EAAAA,EAAAA,MAChB,GAAG,CAAC5E,EAAUyE,KAGZvE,EAAAA,EAAAA,MAAC8C,EAAAA,GAAG,CAAC5C,UAAU,cAAcyE,GAAI,CAAC,EAAG,EAAG,EAAG,GAAGrE,SAAA,EAC5CM,EAAAA,EAAAA,KAACgE,EAAAA,EAAO,CAACjE,GAAI,CAAC,EAAG,EAAG,EAAG,GAAIkE,SAAU,KAAMC,UAAU,SAAQxE,SAAC,mBAG9DM,EAAAA,EAAAA,KAACmE,EAAAA,EAAS,CAACC,aAAW,EAAA1E,UACpBN,EAAAA,EAAAA,MAACiF,EAAAA,EAAa,CAACC,GAAI,EAAGC,GAAI,EAAE7E,SAAA,EAC1BN,EAAAA,EAAAA,MAACoF,EAAAA,EAAe,CAACzE,GAAI,CAAC,EAAG,EAAG,EAAG,GAAGL,SAAA,EAChCM,EAAAA,EAAAA,KAACyE,EAAAA,IAAW,KACZzE,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAACC,GAAI,EAAEZ,SAAC,iBACbM,EAAAA,EAAAA,KAACO,EAAAA,EAAM,KAEPP,EAAAA,EAAAA,KAAC0E,EAAAA,EAAa,OACG,KACnB1E,EAAAA,EAAAA,KAAC2E,EAAAA,EAAc,CAAAjF,UACbM,EAAAA,EAAAA,KAAC4E,EAAW,YAKlB5E,EAAAA,EAAAA,KAAC6E,EAAW,MAGlB,C","sources":["components/ContactItem/ContactItem.tsx","components/Skeletons/ContactsSkeleton.tsx","redux/contacts/selectorsContacts.ts","components/ContactList/ContactList.tsx","components/ContactForm/ContactForm.tsx","pages/ContactsPage/ContactsPage.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Center,\n  Divider,\n  Flex,\n  ListIcon,\n  ListItem,\n  Spacer,\n  Text,\n} from \"@chakra-ui/react\";\nimport { MdContactPhone } from \"react-icons/md\";\n\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport { deleteContact } from \"redux/contacts/operationsContacts\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\n\ninterface ContactItemInterface {\n  id: string;\n  name: string;\n  number: string;\n}\n\nconst ContactItem: React.FC<ContactItemInterface> = ({ id, name, number }) => {\n  const dispatch = useAppDispatch();\n  function handleDeleteBtnClick(event: any) {\n    dispatch<any>(deleteContact(id));\n  }\n  return (\n    <ListItem\n      className=\"contactItem\"\n      p={3}\n      border=\"1px dotted \"\n      borderRadius={\"md\"}\n    >\n      <Flex\n        className=\"contactItem__name\"\n        alignItems={\"center\"}\n        justify={\"space-between\"}\n        flexWrap=\"wrap\"\n        mb={3}\n      >\n        <ListIcon as={MdContactPhone} m={0} />\n        <Text ml=\"10px\">{name}:</Text>\n        <Spacer />\n        <Text className=\"contactItem__number\">{number}</Text>\n      </Flex>\n      <Divider borderColor={\"purple.700\"} mb={3} />\n      <Center>\n        <Button\n          type=\"button\"\n          className=\"contactItem__button\"\n          value={id}\n          onClick={handleDeleteBtnClick}\n          leftIcon={<DeleteIcon />}\n          size={{ base: \"xs\", md: \"md\" }}\n        >\n          Delete\n        </Button>\n      </Center>\n    </ListItem>\n  );\n};\n\nexport default ContactItem;\n","import { Skeleton, Stack } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst ContactsSkeleton: React.FC = () => {\n  return (\n    <Stack p=\"[5,null,10,20]\">\n      <Skeleton h=\"8\" startColor=\"blue.800\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"blue.500\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"cyan.500\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"teal.300\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"green.400\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"pink.700\" endColor=\"regray.300d\" />\n      <Skeleton h=\"8\" startColor=\"purple.600\" endColor=\"gray.300\" />\n    </Stack>\n  );\n};\n\nexport default ContactsSkeleton;\n","import { RootState } from \"../store\";\n\nexport const selectContacts = (state: RootState) => state.contacts.data;\n\nexport const selectLoadingContacts = (state: RootState) =>\n  state.contacts.isLoading;\n","import { Box, List, SimpleGrid } from \"@chakra-ui/react\";\nimport ContactItem from \"components/ContactItem/ContactItem\";\nimport ContainerComp from \"components/Container/ContainerComp\";\nimport SkeletonContacts from \"components/Skeletons/ContactsSkeleton\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport { Contact } from \"models/contact\";\nimport React from \"react\";\nimport {\n  selectContacts,\n  selectLoadingContacts,\n} from \"redux/contacts/selectorsContacts\";\n\nconst ContactList: React.FC = () => {\n  const contacts: Contact[] = useAppSelector(selectContacts);\n  const isLoading: boolean = useAppSelector(selectLoadingContacts);\n\n  return (\n    <Box as=\"section\" className=\"section section--contactList\">\n      <ContainerComp>\n        <List className={\"contactList\"} p={3} spacing={2}>\n          <SimpleGrid minChildWidth={\"250px\"} spacing={{ base: \"2\", md: \"4\" }}>\n            {isLoading && <SkeletonContacts />}\n            {contacts.length > 0 &&\n              contacts.map(({ id = \"\", name, number }) => (\n                <ContactItem key={id} id={id} name={name} number={number} />\n              ))}\n          </SimpleGrid>\n        </List>\n      </ContainerComp>\n    </Box>\n  );\n};\n\nexport default ContactList;\n","import { addContact } from \"redux/contacts/operationsContacts\";\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport { Box, Container } from \"@chakra-ui/react\";\n\nconst ContactForm = () => {\n  const dispatch = useAppDispatch();\n\n  function onContactFormSubmit(event: any) {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const name: string = form.elements.name.value;\n    const number: string = form.elements.number.value;\n    if (!name || !number) return;\n    dispatch<any>(addContact({ name, number }));\n    form.reset();\n  }\n\n  return (\n    <Box as=\"section\" className=\"section section--contactForm\">\n      <Container className=\"container\">\n        <form className={\"contactForm\"} onSubmit={onContactFormSubmit}>\n          <label>\n            <p className=\"contactForm__label-text\">Name</p>\n            <input\n              type=\"text\"\n              className=\"contactForm__input\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              onChange={() => {}}\n              placeholder=\"Enter your name\"\n              autoFocus\n            />\n          </label>\n          <label>\n            <p className=\"contactForm__label-text\">Number</p>\n            <input\n              type=\"tel\"\n              className=\"contactForm__input\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              onChange={() => {}}\n              placeholder=\"Enter your phone number\"\n            />\n          </label>\n          <button type=\"submit\" className=\"contactForm__button\">\n            Add contact\n          </button>\n        </form>\n      </Container>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import React, { useEffect } from \"react\";\nimport {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Heading,\n  Spacer,\n  Text,\n} from \"@chakra-ui/react\";\nimport { MdPersonAdd } from \"react-icons/md\";\n\nimport { fetchContacts } from \"redux/contacts/operationsContacts\";\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport { selectorAuth } from \"redux/auth/selectorsAuth\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\n\nconst ContactsPage: React.FC = () => {\n  const { token } = useAppSelector(selectorAuth);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (!token) return;\n    dispatch<any>(fetchContacts());\n  }, [dispatch, token]);\n\n  return (\n    <Box className=\"contactPage\" pt={[3, 3, 4, 5]}>\n      <Heading mb={[2, 2, 3, 4]} fontSize={\"xl\"} textAlign=\"center\">\n        Your contacts\n      </Heading>\n      <Accordion allowToggle>\n        <AccordionItem pl={2} pr={2}>\n          <AccordionButton mb={[2, 2, 3, 4]}>\n            <MdPersonAdd />\n            <Text ml={2}>Add contact</Text>\n            <Spacer />\n\n            <AccordionIcon />\n          </AccordionButton>{\" \"}\n          <AccordionPanel>\n            <ContactForm />\n          </AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n\n      <ContactList />\n    </Box>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["_ref","id","name","number","dispatch","useAppDispatch","_jsxs","ListItem","className","p","border","borderRadius","children","Flex","alignItems","justify","flexWrap","mb","_jsx","ListIcon","as","MdContactPhone","m","Text","ml","Spacer","Divider","borderColor","Center","Button","type","value","onClick","event","deleteContact","leftIcon","DeleteIcon","size","base","md","Stack","Skeleton","h","startColor","endColor","selectContacts","state","contacts","data","selectLoadingContacts","isLoading","useAppSelector","Box","ContainerComp","List","spacing","SimpleGrid","minChildWidth","SkeletonContacts","length","map","_ref$id","ContactItem","Container","onSubmit","preventDefault","form","currentTarget","elements","addContact","reset","pattern","title","required","onChange","placeholder","autoFocus","token","selectorAuth","useEffect","fetchContacts","pt","Heading","fontSize","textAlign","Accordion","allowToggle","AccordionItem","pl","pr","AccordionButton","MdPersonAdd","AccordionIcon","AccordionPanel","ContactForm","ContactList"],"sourceRoot":""}