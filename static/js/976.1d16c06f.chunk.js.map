{"version":3,"file":"static/js/976.1d16c06f.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.tsx","components/ContactsPaginate/ContactsPaginate.styled.jsx","components/ContactsPaginate/ContactsPaginate.tsx","components/Skeletons/ContactsSkeleton.tsx","redux/contacts/selectorsContacts.ts","components/ContactList/ContactList.tsx","components/ContactFilter/ContactFilter.tsx","components/ContactForm/ContactForm.tsx","components/ContactAdd/ContactAdd.tsx","pages/ContactsPage/ContactsPage.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Center,\n  Divider,\n  Flex,\n  Icon,\n  IconButton,\n  ListItem,\n  Text,\n} from \"@chakra-ui/react\";\nimport { MdContactPhone } from \"react-icons/md\";\n\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport { deleteContact } from \"redux/contacts/operationsContacts\";\nimport { DeleteIcon, PhoneIcon } from \"@chakra-ui/icons\";\n\ninterface ContactItemInterface {\n  id: string;\n  name: string;\n  number: string;\n}\n\nconst ContactItem: React.FC<ContactItemInterface> = ({ id, name, number }) => {\n  const dispatch = useAppDispatch();\n  function handleDeleteBtnClick(event: any) {\n    dispatch<any>(deleteContact(id));\n  }\n  return (\n    <ListItem\n      className=\"contactItem\"\n      position={\"relative\"}\n      p={5}\n      border=\"1px dotted\"\n      borderColor=\"accent.300\"\n      borderRadius={\"md\"}\n      maxW={{ md: \"300px\", lg: \"500px\" }}\n      w=\"100%\"\n      _hover={{ borderColor: \"white\", transform: \"translate(1px, 1px)\" }}\n      _focus={{ borderColor: \"white\", transform: \"translate(1px, 1px)\" }}\n    >\n      <Icon as={MdContactPhone} m={0} position=\"absolute\" top={0} left={0} />\n      <Flex\n        className=\"contactItem__name\"\n        alignItems={\"center\"}\n        justify={\"space-between\"}\n        flexDirection=\"column\"\n        mb={3}\n        gap={3}\n      >\n        <Text maxW={\"70%\"} display={\"inline-block\"} isTruncated>\n          {name}:\n        </Text>\n\n        <Text className=\"contactItem__number\">{number}</Text>\n      </Flex>\n      <Divider borderColor={\"purple.700\"} mb={3} />\n      <IconButton\n        type=\"button\"\n        aria-label=\"delete\"\n        className=\"contactItem__button\"\n        w={\"15px\"}\n        h={\"15px\"}\n        position=\"absolute\"\n        top={0}\n        right={0}\n        value={id}\n        onClick={handleDeleteBtnClick}\n        icon={<DeleteIcon />}\n        size={{ base: \"xs\", md: \"md\" }}\n        colorScheme={\"purple\"}\n        _hover={{\n          color: \"purple.700\",\n          bgColor: \"white\",\n          border: \"1px solid purple\",\n        }}\n        _focus={{\n          color: \"purple.700\",\n          bgColor: \"white\",\n          border: \"1px solid purple\",\n        }}\n      ></IconButton>\n      <Center>\n        <Button\n          type=\"button\"\n          className=\"contactItem__button--call\"\n          leftIcon={<PhoneIcon />}\n          size={{ base: \"xs\", md: \"md\" }}\n          colorScheme={\"purple\"}\n          _hover={{\n            color: \"purple.700\",\n            bgColor: \"white\",\n            border: \"1px solid purple\",\n          }}\n          _focus={{\n            color: \"purple.700\",\n            bgColor: \"white\",\n            border: \"1px solid purple\",\n          }}\n        >\n          <a href={`tel:${number}`}>Call</a>\n        </Button>\n      </Center>\n    </ListItem>\n  );\n};\n\nexport default ContactItem;\n","import styled from \"styled-components\";\nexport const ContactsPaginateStyled = styled.div`\n  padding: 20px;\n  .contactsPaginate {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 15px;\n\n    & > li {\n      list-style: none;\n      &.selected {\n        color: #805ad5;\n      }\n      &.disabled {\n        position: absolute;\n        width: 1px;\n        height: 1px;\n        margin: -1px;\n        padding: 0;\n        overflow: hidden;\n        border: 0;\n        clip: rect(0 0 0 0);\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport { ContactsPaginateStyled } from \"./ContactsPaginate.styled\";\n\ninterface ContactsPaginateInterface {\n  pageCount: number;\n  setPage: (page: number) => void;\n}\n\nconst ContactsPaginate: React.FC<ContactsPaginateInterface> = ({\n  pageCount,\n  setPage,\n}) => {\n  function handlePageClick(event: any) {\n    const newPage = event.selected + 1;\n    setPage(newPage);\n  }\n  return (\n    <ContactsPaginateStyled>\n      <ReactPaginate\n        breakLabel=\"...\"\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={3}\n        pageCount={pageCount}\n        previousLabel=\"< previous\"\n        className=\"contactsPaginate\"\n      />\n    </ContactsPaginateStyled>\n  );\n};\n\nexport default ContactsPaginate;\n","import { Skeleton, Stack } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst ContactsSkeleton: React.FC = () => {\n  return (\n    <Stack p=\"[5,null,10,20]\" w={\"100%\"}>\n      <Skeleton h=\"8\" startColor=\"blue.800\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"blue.500\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"cyan.500\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"teal.300\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"green.400\" endColor=\"gray.300\" />\n      <Skeleton h=\"8\" startColor=\"pink.700\" endColor=\"regray.300d\" />\n      <Skeleton h=\"8\" startColor=\"purple.600\" endColor=\"gray.300\" />\n    </Stack>\n  );\n};\n\nexport default ContactsSkeleton;\n","import { RootState } from \"../store\";\n\nexport const selectContacts = (state: RootState) => state.contacts.data;\n\nexport const selectLoadingContacts = (state: RootState) =>\n  state.contacts.isLoading;\n","import { Box, Center, List, SimpleGrid } from \"@chakra-ui/react\";\nimport ContactItem from \"components/ContactItem/ContactItem\";\nimport ContactsPaginate from \"components/ContactsPaginate/ContactsPaginate\";\nimport ContainerComp from \"components/Container/ContainerComp\";\nimport SkeletonContacts from \"components/Skeletons/ContactsSkeleton\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport { Contact } from \"models/contact\";\nimport React, { useEffect, useState } from \"react\";\n\nimport {\n  selectContacts,\n  selectLoadingContacts,\n} from \"redux/contacts/selectorsContacts\";\n\ninterface ContactListInterface {\n  query: string | null;\n}\n\nconst ContactList: React.FC<ContactListInterface> = ({ query }) => {\n  //local state\n  const [page, setPage] = useState(1);\n  const [shownContacts, setShownContacts] = useState<Contact[]>([]);\n  //\n\n  const contacts: Contact[] = useAppSelector(selectContacts);\n  const filteredContacts: Contact[] = filterContacts(contacts, query);\n  // let filteredPageContacts = filteredContacts.slice(\n  //   0 + 10 * (page - 1),\n  //   9 + 10 * (page - 1)\n  // );\n  const isLoading: boolean = useAppSelector(selectLoadingContacts);\n  const CONTACTS_PER_PAGE: number = 10;\n  const pageCount: number = Math.ceil(\n    filteredContacts.length / CONTACTS_PER_PAGE\n  );\n\n  useEffect(() => {\n    const filteredPageContacts: Contact[] = filteredContacts.slice(\n      0 + CONTACTS_PER_PAGE * (page - 1),\n      9 + CONTACTS_PER_PAGE * (page - 1) + 1\n    );\n    setShownContacts(filteredPageContacts);\n  }, [page, filteredContacts]);\n\n  return (\n    <Box as=\"section\" className=\"section section--contactList\">\n      <ContainerComp>\n        <List className={\"contactList\"} spacing={2} mb={\"20px\"}>\n          <SimpleGrid\n            minChildWidth={{ base: \"270px\", md: \"300px\" }}\n            spacing={{ base: \"2\", md: \"4\" }}\n          >\n            {isLoading ? (\n              <SkeletonContacts />\n            ) : (\n              shownContacts.length > 0 &&\n              shownContacts.map(({ id = \"\", name, number }) => (\n                <Center key={id}>\n                  <ContactItem id={id} name={name} number={number} />\n                </Center>\n              ))\n            )}\n          </SimpleGrid>\n        </List>\n        {pageCount > 1 && !isLoading && (\n          <ContactsPaginate pageCount={pageCount} setPage={setPage} />\n        )}\n      </ContainerComp>\n    </Box>\n  );\n};\n\nexport default ContactList;\n\nfunction filterContacts(contacts: Contact[], query: string | null) {\n  if (!query) return contacts;\n  return contacts.filter((contact) => contact.name.includes(query));\n}\n","import React from \"react\";\nimport { Center, Input } from \"@chakra-ui/react\";\nimport ContainerComp from \"components/Container/ContainerComp\";\n\ninterface ContactFilterInterface {\n  getQuery(query: string): void;\n}\n\nconst ContactFilter: React.FC<ContactFilterInterface> = ({ getQuery }) => {\n  function handleQueryChange(event: any) {\n    getQuery(event.target.value);\n  }\n\n  return (\n    <ContainerComp>\n      <Center>\n        <Input\n          type={\"text\"}\n          placeholder={\"Enter your filter query\"}\n          onChange={handleQueryChange}\n          maxW={{ md: \"400px\", lg: \"600px\" }}\n          textAlign=\"center\"\n          cursor={\"pointer\"}\n          borderRadius=\"md\"\n          _hover={{\n            color: \"white\",\n            backgroundColor: \"accent.500\",\n            _placeholder: { color: \"white\" },\n          }}\n          _focus={{\n            color: \"white\",\n            backgroundColor: \"accent.500\",\n            _placeholder: { color: \"white\" },\n          }}\n        ></Input>\n      </Center>\n    </ContainerComp>\n  );\n};\n\nexport default ContactFilter;\n","import { addContact } from \"redux/contacts/operationsContacts\";\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport {\n  Box,\n  Button,\n  Center,\n  Container,\n  FormLabel,\n  Input,\n  Text,\n} from \"@chakra-ui/react\";\n\nconst ContactForm = () => {\n  const dispatch = useAppDispatch();\n\n  function onContactFormSubmit(event: any) {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const name: string = form.elements.name.value;\n    const number: string = form.elements.number.value;\n    if (!name || !number) return;\n    dispatch<any>(addContact({ name, number }));\n    form.reset();\n  }\n\n  return (\n    <Box as=\"section\" className=\"section section--contactForm\">\n      <Container className=\"container\">\n        <form className={\"contactForm\"} onSubmit={onContactFormSubmit}>\n          <FormLabel\n            mb={3}\n            cursor={\"pointer\"}\n            _hover={{ textShadow: \"accentTextShadow2\" }}\n            _focus={{ textShadow: \"accentTextShadow2\" }}\n          >\n            <Text className=\"contactForm__FormLabel-text\">Name</Text>\n            <Input\n              type=\"text\"\n              className=\"contactForm__input\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              placeholder=\"Enter your name\"\n              _hover={{ borderColor: \"accent2.700\" }}\n              _focus={{ borderColor: \"accent2.700\" }}\n            />\n          </FormLabel>\n          <FormLabel\n            mb={3}\n            cursor={\"pointer\"}\n            _hover={{ textShadow: \"accentTextShadow2\" }}\n            _focus={{ textShadow: \"accentTextShadow2\" }}\n          >\n            <Text className=\"contactForm__FormLabel-text\">Number</Text>\n            <Input\n              type=\"tel\"\n              className=\"contactForm__input\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              placeholder=\"Enter your phone number\"\n              _hover={{ borderColor: \"accent2.700\" }}\n              _focus={{ borderColor: \"accent2.700\" }}\n            />\n          </FormLabel>\n          <Center>\n            <Button\n              type=\"submit\"\n              className=\"contactForm__button\"\n              colorScheme={\"purple\"}\n              _hover={{\n                color: \"purple.700\",\n                bgColor: \"white\",\n                border: \"1px solid purple\",\n              }}\n              _focus={{\n                color: \"purple.700\",\n                bgColor: \"white\",\n                border: \"1px solid purple\",\n              }}\n            >\n              Add contact\n            </Button>\n          </Center>\n        </form>\n      </Container>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Spacer,\n  Text,\n} from \"@chakra-ui/react\";\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport React from \"react\";\nimport { MdPersonAdd } from \"react-icons/md\";\n\nconst ContactAdd: React.FC = () => {\n  return (\n    <Accordion allowToggle>\n      <AccordionItem pl={2} pr={2}>\n        <AccordionButton\n          mb={[2, 2, 3, 4]}\n          borderRadius=\"md\"\n          _hover={{\n            color: \"white\",\n            backgroundColor: \"accent.500\",\n          }}\n        >\n          <MdPersonAdd />\n          <Text ml={5}>Add contact</Text>\n          <Spacer />\n\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <ContactForm />\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n};\n\nexport default ContactAdd;\n","import React, { useEffect, useState } from \"react\";\nimport { Box, Heading } from \"@chakra-ui/react\";\nimport { Helmet } from \"react-helmet\";\n\nimport { fetchContacts } from \"redux/contacts/operationsContacts\";\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport { selectorAuth } from \"redux/auth/selectorsAuth\";\n\nimport ContactList from \"components/ContactList/ContactList\";\nimport ContactFilter from \"components/ContactFilter/ContactFilter\";\nimport ContainerComp from \"components/Container/ContainerComp\";\nimport ContactAdd from \"components/ContactAdd/ContactAdd\";\n\nconst ContactsPage: React.FC = () => {\n  //localstate\n  const [query, setQuery] = useState<string | null>(null);\n  //\n  const { token } = useAppSelector(selectorAuth);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (!token) return;\n    dispatch<any>(fetchContacts());\n  }, [dispatch, token]);\n\n  function getQuery(query: string) {\n    setQuery(query);\n  }\n\n  return (\n    <Box\n      className=\"contactPage\"\n      pt={[3, 3, 4, 5]}\n      fontFamily=\"contactsFont\"\n      flexGrow={1}\n    >\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Alkatra:wght@400;700&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </Helmet>\n      <ContainerComp>\n        <Heading mb={[2, 2, 3, 4]} fontSize={\"xl\"} textAlign=\"center\">\n          Your contacts\n        </Heading>\n        <ContactAdd />\n      </ContainerComp>\n\n      <ContactFilter getQuery={getQuery} />\n      <ContactList query={query} />\n    </Box>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["_ref","id","name","number","dispatch","useAppDispatch","_jsxs","ListItem","className","position","p","border","borderColor","borderRadius","maxW","md","lg","w","_hover","transform","_focus","children","_jsx","Icon","as","MdContactPhone","m","top","left","Flex","alignItems","justify","flexDirection","mb","gap","Text","display","isTruncated","Divider","IconButton","type","h","right","value","onClick","event","deleteContact","icon","DeleteIcon","size","base","colorScheme","color","bgColor","Center","Button","leftIcon","PhoneIcon","href","concat","ContactsPaginateStyled","styled","_templateObject","_taggedTemplateLiteral","pageCount","setPage","ReactPaginate","breakLabel","nextLabel","onPageChange","newPage","selected","pageRangeDisplayed","previousLabel","Stack","Skeleton","startColor","endColor","selectContacts","state","contacts","data","selectLoadingContacts","isLoading","query","_useState","useState","_useState2","_slicedToArray","page","_useState3","_useState4","shownContacts","setShownContacts","filteredContacts","filter","contact","includes","filterContacts","useAppSelector","Math","ceil","length","useEffect","filteredPageContacts","slice","Box","ContainerComp","List","spacing","SimpleGrid","minChildWidth","SkeletonContacts","map","_ref2","_ref2$id","ContactItem","ContactsPaginate","getQuery","Input","placeholder","onChange","target","textAlign","cursor","backgroundColor","_placeholder","Container","onSubmit","preventDefault","form","currentTarget","elements","addContact","reset","FormLabel","textShadow","pattern","title","required","Accordion","allowToggle","AccordionItem","pl","pr","AccordionButton","MdPersonAdd","ml","Spacer","AccordionIcon","AccordionPanel","ContactForm","setQuery","token","selectorAuth","fetchContacts","pt","fontFamily","flexGrow","Helmet","rel","Heading","fontSize","ContactAdd","ContactFilter","ContactList"],"sourceRoot":""}