{"version":3,"file":"static/js/417.3dd50a59.chunk.js","mappings":"yLAiFA,IAzEwC,SAAHA,GAAkB,IAAZC,EAAID,EAAJC,KAEnCC,GAAWC,EAAAA,EAAAA,KACXC,EAAmC,aAATH,EAwBhC,OACEI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gBAAeF,SAAEH,EAAiB,UAAY,WAC5DC,EAAAA,EAAAA,MAAA,QAAMK,SAzBV,SAA0BC,GACxBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACbC,EAAgBF,EAAKG,SAASD,MAAME,MACpCC,EAAmBL,EAAKG,SAASE,SAASD,MAChD,OAAQhB,GACN,IAAK,WAAa,IAADkB,EACfjB,GACEkB,EAAAA,EAAAA,IAAW,CAAEC,KAAmB,QAAfF,EAAEN,EAAKG,gBAAQ,IAAAG,OAAA,EAAbA,EAAeE,KAAKJ,MAAOF,MAAAA,EAAOG,SAAAA,KAEvD,MAEF,IAAK,QACHhB,GAAcoB,EAAAA,EAAAA,IAAU,CAAEP,MAAAA,EAAOG,SAAAA,KACjC,MAEF,QACE,MAAM,IAAIK,MAAM,yBAEpBV,EAAKW,OACP,EAKsCf,UAAU,aAAYF,SAAA,CACrDH,IACCC,EAAAA,EAAAA,MAAA,SAAOI,UAAU,cAAaF,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBF,SAAC,UAChCC,EAAAA,EAAAA,KAAA,SACEa,KAAK,OACLpB,KAAM,OACNwB,UAAQ,EACRC,WAAS,EACTC,YAAY,kBACZlB,UAAU,oBAIhBJ,EAAAA,EAAAA,MAAA,SAAOI,UAAU,cAAaF,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBF,SAAC,WAChCC,EAAAA,EAAAA,KAAA,SACEa,KAAK,QACLpB,KAAM,QACNwB,UAAQ,EACRC,WAAS,EACTC,YAAY,mBACZlB,UAAU,oBAGdJ,EAAAA,EAAAA,MAAA,SAAOI,UAAU,cAAaF,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAkBF,SAAC,cAChCC,EAAAA,EAAAA,KAAA,SACEa,KAAK,WACLpB,KAAM,WACNwB,UAAQ,EACRE,YAAY,sBACZlB,UAAU,oBAGdD,EAAAA,EAAAA,KAAA,UAAQP,KAAK,SAASQ,UAAU,mBAAkBF,SAC/CH,EAAiB,UAAY,eAKxC,C,kHC3CA,UA5ByB,WACvB,IAAMwB,GAAqBC,EAAAA,EAAAA,GAAeC,EAAAA,IACpCC,EAAoBC,SAAQH,EAAAA,EAAAA,GAAeI,EAAAA,KAC3CC,GAAWC,EAAAA,EAAAA,MAQjB,OANAC,EAAAA,EAAAA,YAAU,WACJL,GACFG,EAAS,YAAa,CAAEG,SAAS,GAErC,GAAG,CAACN,EAAUG,KAGZ1B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAS,CAAA/B,SACPqB,GACCpB,EAAAA,EAAAA,KAAC+B,EAAAA,GAAY,CACXC,MAAM,UACNC,iBAAiB,UACjBC,OAAO,MACPC,MAAM,MACNC,UAAU,4BAGZpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CAAC5C,KAAK,cAIvB,C","sources":["components/AuthForm/AuthForm.tsx","pages/RegisterPage/RegisterPage.tsx"],"sourcesContent":["import { useAppDispatch } from \"hooks/useAppDispatch\";\nimport React, { FC } from \"react\";\nimport { userLogin, userSignUp } from \"redux/auth/operationsAuth\";\n\ninterface AuthFormInterface {\n  type: \"register\" | \"login\";\n}\n\nconst AuthForm: FC<AuthFormInterface> = ({ type }) => {\n  // const token: string | null = useAppSelector((state) => state.auth.token);\n  const dispatch = useAppDispatch();\n  const isRegisterForm: boolean = type === \"register\" ? true : false;\n\n  function handleAuthSubmit(event: any) {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const email: string = form.elements.email.value;\n    const password: string = form.elements.password.value;\n    switch (type) {\n      case \"register\": {\n        dispatch<any>(\n          userSignUp({ name: form.elements?.name.value, email, password })\n        );\n        break;\n      }\n      case \"login\": {\n        dispatch<any>(userLogin({ email, password }));\n        break;\n      }\n      default:\n        throw new Error(\"wrong auth type value\");\n    }\n    form.reset();\n  }\n\n  return (\n    <>\n      <h2 className=\"auth__heading\">{isRegisterForm ? \"Sign up\" : \"Login\"}</h2>\n      <form onSubmit={handleAuthSubmit} className=\"auth__form\">\n        {isRegisterForm && (\n          <label className=\"auth__label\">\n            <p className=\"auth__label-text\">Name</p>\n            <input\n              name=\"name\"\n              type={\"text\"}\n              required\n              autoFocus\n              placeholder=\"Enter your name\"\n              className=\"auth__input\"\n            />\n          </label>\n        )}\n        <label className=\"auth__label\">\n          <p className=\"auth__label-text\">Email</p>\n          <input\n            name=\"email\"\n            type={\"email\"}\n            required\n            autoFocus\n            placeholder=\"Enter your email\"\n            className=\"auth__input\"\n          />\n        </label>\n        <label className=\"auth__label\">\n          <p className=\"auth__label-text\">Password</p>\n          <input\n            name=\"password\"\n            type={\"password\"}\n            required\n            placeholder=\"Enter your password\"\n            className=\"auth__input\"\n          />\n        </label>\n        <button type=\"submit\" className=\"auth__submit-btn\">\n          {isRegisterForm ? \"Sign up\" : \"Login\"}\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import { Container } from \"@chakra-ui/react\";\nimport AuthForm from \"components/AuthForm/AuthForm\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport React, { FC, useEffect } from \"react\";\nimport { ThreeCircles } from \"react-loader-spinner\";\nimport { useNavigate } from \"react-router-dom\";\nimport { selectorLoadingAuth, selectorLogged } from \"redux/auth/selectorsAuth\";\n\nconst RegisterPage: FC = () => {\n  const isLoading: boolean = useAppSelector(selectorLoadingAuth);\n  const isLogged: boolean = Boolean(useAppSelector(selectorLogged));\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isLogged) {\n      navigate(\"/contacts\", { replace: true });\n    }\n  }, [isLogged, navigate]);\n\n  return (\n    <Container>\n      {isLoading ? (\n        <ThreeCircles\n          color=\"#1A365D\"\n          innerCircleColor=\"#1CD8D2\"\n          height=\"200\"\n          width=\"200\"\n          ariaLabel=\"three-circles-rotating\"\n        />\n      ) : (\n        <AuthForm type=\"register\" />\n      )}\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["_ref","type","dispatch","useAppDispatch","isRegisterForm","_jsxs","_Fragment","children","_jsx","className","onSubmit","event","preventDefault","form","currentTarget","email","elements","value","password","_form$elements","userSignUp","name","userLogin","Error","reset","required","autoFocus","placeholder","isLoading","useAppSelector","selectorLoadingAuth","isLogged","Boolean","selectorLogged","navigate","useNavigate","useEffect","replace","Container","ThreeCircles","color","innerCircleColor","height","width","ariaLabel","AuthForm"],"sourceRoot":""}